script(type='text/javascript', src='/adminlte/plugins/jQuery/jquery-2.2.3.min.js')
script(type='text/javascript', src='https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js')
script(type='text/javascript', src='/adminlte/bootstrap/js/bootstrap.min.js')
script(type='text/javascript', src='/adminlte/plugins/slimScroll/jquery.slimscroll.min.js')
script(type='text/javascript', src='/adminlte/dist/js/app.min.js')
script(type='text/javascript', src='/adminlte/dist/js/demo.js')
script(type='text/javascript', src='/adminlte/plugins/iCheck/icheck.min.js')
script(type='text/javascript', src='/adminlte/plugins/knob/jquery.knob.js')
script(type='text/javascript', src='https://cdnjs.cloudflare.com/ajax/libs/raphael/2.1.0/raphael-min.js')
script(type='text/javascript', src='https://code.jquery.com/ui/1.11.4/jquery-ui.min.js')
script(type='text/javascript', src='/adminlte/plugins/morris/morris.min.js')
script(type='text/javascript', src='/adminlte/plugins/jvectormap/jquery-jvectormap-world-mill-en.js')
script(type='text/javascript', src='/adminlte/plugins/chartjs/Chart.min.js')
script(type='text/javascript', src='/adminlte/plugins/fastclick/fastclick.js')
script(type='text/javascript', src='https://unpkg.com/leaflet@1.0.2/dist/leaflet.js')
script(type='text/javascript',src='/socket.io/socket.io.js')
script(type='text/javascript').
  function goBack() {
    window.history.back();
    }
    
    var options = {
            year: '2-digit',
            month: '2-digit',
            day: '2-digit'
        };

script(type='text/javascript').
    function formatDate(date){

                 var getnewdate = date.getDate();
                 var getmonth = date.getMonth()+1;
                 var gethours = date.getHours();
                 var getminutes = date.getMinutes();
                 var getseconds = date.getSeconds();
                 var newdate,newmonth,newhours,newminutes,newseconds;

                 if(parseInt(getnewdate) < 10 ){
                     newdate = "0"+getnewdate;
                    
                 }
                 else{
                     newdate = getnewdate;
                     
                 }

                 if(parseInt(getmonth) < 10){
                     newmonth = "0"+(getmonth);
                     
                 }
                 else{
                     newmonth = (getmonth);
                     
                 }

                 if(parseInt(gethours) < 10){
                     newhours = "0"+gethours;
                     
                 }
                 else{
                     newhours = gethours;
                     
                 }

                 if(parseInt(getminutes) < 10){
                     newminutes = "0"+getminutes;
                     
                 }
                 else{
                     newminutes = getminutes;
                     
                 }

                 if(parseInt(getseconds) < 10){
                     newseconds = "0"+getseconds;
                     
                 }
                 else{
                     newseconds = getseconds;
                    
                 }
                 
                 
               var datetime = newdate + "-"
                    + newmonth  + "-" 
                    + date.getFullYear();

            return datetime;
    }

script(type='text/javascript').
  function dateFormatChange(dates) {
        alert(dates);
        var d = createDateAsUTC(dates);
        d.setMinutes(d.getMinutes()+480);
        var ddate = d.getDate();
        var dmonth = d.getMonth()+1;
        var dyear = d.getFullYear();
        var dhour = d.getHours();
        var dminutes = d.getMinutes();
        var dseconds = d.getSeconds();

        if(ddate < 10){
            ddate = "0"+ddate;
        }
        if(dmonth < 10){
            dmonth = "0"+dmonth;
        }

        if(dhour < 10){
            dhour = "0"+dhour;
        }
        if(dminutes < 10){
            dminutes = "0"+dminutes;
        }
        if(dseconds < 10){
            dseconds = "0"+dseconds;
        }

        var newdate;
        if(dhour < 12){
            newdate = dyear+"-"+dmonth+"-"+ddate+" "+dhour+":"+dminutes+":"+dseconds+" AM";
        }
        else{
            newdate = dyear+"-"+dmonth+"-"+ddate+" "+dhour+":"+dminutes+":"+dseconds+" PM";
        }
        
        return newdate;
    }
    
script(type='text/javascript').
    $(function () {
        var dd;
        var data = document.getElementById("graph_data").value;
        //alert(data);
        if(data!=='undefined'){
        dd = JSON.parse(data);
        //alert(dd);
        //alert(dd.length+" record(s) found");
        }
       
        var date1,date2,date3,date4,date5,date6,date7,date8;
        
        var date8_new = new Date();
        date8 = formatDate(date8_new);
        
        var date7_new = new Date(date8_new.getTime());
        date7_new.setDate(date8_new.getDate() - 1);
        date7 = formatDate(date7_new);
        
        var date6_new = new Date(date7_new.getTime());
        date6_new.setDate(date7_new.getDate() - 1);
        date6 = formatDate(date6_new);
        
        var date5_new = new Date(date6_new.getTime());
        date5_new.setDate(date6_new.getDate() - 1);
        date5 = formatDate(date5_new);
        
        var date4_new = new Date(date5_new.getTime());
        date4_new.setDate(date5_new.getDate() - 1);
        date4 = formatDate(date4_new);
        
        var date3_new = new Date(date4_new.getTime());
        date3_new.setDate(date4_new.getDate() - 1);
        date3 = formatDate(date3_new);
        
        var date2_new = new Date(date3_new.getTime());
        date2_new.setDate(date3_new.getDate() - 1);
        date2 = formatDate(date2_new);
        
        var date1_new = new Date(date2_new.getTime());
        date1_new.setDate(date2_new.getDate() - 1);
        date1 = formatDate(date1_new);
        
        console.log("date8="+date8);
        
       var no1=0,no2=0,no3=0,no4=0,no5=0,no6=0,no7=0;
       
       for(var i=0;i<dd.length;i++){
            
                 var getnewdate = dd[i].day_s;
                 var getmonth = dd[i].month_s;
                 
                 var newdate,newmonth;
                if(getnewdate < 10){
                     newdate = "0"+getnewdate;
                 }
                 else{
                     newdate = getnewdate;
                 }
                 
                 if(getmonth < 10){
                     newmonth = "0"+getmonth;
                 }
                 else{
                     newmonth = getmonth;
                 }
                var nowdate =  newdate+"-"+newmonth+"-"+dd[i].year_s;
                
                if(nowdate === date8){
                    no1 = dd[i].number;
                }
                if(nowdate === date7){
                    no2 = dd[i].number;
                }
                if(nowdate === date6){
                    no3 = dd[i].number;
                }
                if(nowdate === date5){
                    no4 = dd[i].number;
                }
                if(nowdate === date4){
                    no5 = dd[i].number;
                }
                if(nowdate === date3){
                    no6 = dd[i].number;
                }
                if(nowdate === date2){
                    no7 = dd[i].number;
                }
                
            }

        // Get context with jQuery - using jQuery's .get() method.
        var areaChartCanvas = $("#areaChart").get(0).getContext("2d");
        // This will get the first returned node in the jQuery collection.
        var areaChart = new Chart(areaChartCanvas);

        var areaChartData = {
          labels: [date2, date3, date4, date5, date6, date7, date8],
          datasets: [
            {
              label: "Assets Moved",
              fillColor: "rgba(60,141,188,0.9)",
              strokeColor: "rgba(60,141,188,0.8)",
              pointColor: "#3b8bba",
              pointStrokeColor: "rgba(60,141,188,1)",
              pointHighlightFill: "#fff",
              pointHighlightStroke: "rgba(60,141,188,1)",
              data: [no7, no6, no5, no4, no3, no2, no1]
            }
          ]
        };

        var areaChartOptions = {
          //Boolean - If we should show the scale at all
          showScale: true,
          //Boolean - Whether grid lines are shown across the chart
          scaleShowGridLines: false,
          //String - Colour of the grid lines
          scaleGridLineColor: "rgba(0,0,0,.05)",
          //Number - Width of the grid lines
          scaleGridLineWidth: 1,
          //Boolean - Whether to show horizontal lines (except X axis)
          scaleShowHorizontalLines: true,
          //Boolean - Whether to show vertical lines (except Y axis)
          scaleShowVerticalLines: true,
          //Boolean - Whether the line is curved between points
          bezierCurve: true,
          //Number - Tension of the bezier curve between points
          bezierCurveTension: 0.3,
          //Boolean - Whether to show a dot for each point
          pointDot: false,
          //Number - Radius of each point dot in pixels
          pointDotRadius: 4,
          //Number - Pixel width of point dot stroke
          pointDotStrokeWidth: 1,
          //Number - amount extra to add to the radius to cater for hit detection outside the drawn point
          pointHitDetectionRadius: 20,
          //Boolean - Whether to show a stroke for datasets
          datasetStroke: true,
          //Number - Pixel width of dataset stroke
          datasetStrokeWidth: 2,
          //Boolean - Whether to fill the dataset with a color
          datasetFill: true,
          //String - A legend template
          legendTemplate: "<ul class=\"<%=name.toLowerCase()%>-legend\"><% for (var i=0; i<datasets.length; i++){%><li><span style=\"background-color:<%=datasets[i].lineColor%>\"></span><%if(datasets[i].label){%><%=datasets[i].label%><%}%></li><%}%></ul>",
          //Boolean - whether to maintain the starting aspect ratio or not when responsive, if set to false, will take up entire container
          maintainAspectRatio: true,
          //Boolean - whether to make the chart responsive to window resizing
          responsive: true
        };

        //Create the line chart
        areaChart.Line(areaChartData, areaChartOptions);

        });
//script(type='text/javascript',async).
//    
    alert("in dashboard js");
    //console.log(data);
    
    //source => http://codepen.io/zachdunn/pen/VvRXdP
        // Using leaflet.js to pan and zoom a big image.
    // See also: http://kempe.net/blog/2014/06/14/leaflet-pan-zoom-image.html
    // Marker Pin: http://codepen.io/zachdunn/pen/wapEam
    // create the slippy map
    var map = L.map('image-map-dashboard', {
      minZoom: 1,
      maxZoom: 4,
      center: [0, 0],
      zoom: 1,
      crs: L.CRS.Simple,
      attributionControl: false
    });

    L.control.attribution({
      prefix: false
    }).addAttribution('').addTo(map);
    // House: http://i.imgur.com/cenqiCf.jpg
    // Palace SVG (1280 x 806): https://dl.dropbox.com/s/yhrpnftsuis15z6/Topkapi_Palace_plan.svg
    // dimensions of the image
    var w = 2200 * 2,
    h = 1600 * 2,
    //url = '/adminlte/dist/img/hospital_floor_plan.jpg';
    url = '/uploads/map/icu_smc4.png';

    // calculate the edges of the image, in coordinate space
    var southWest = map.unproject([0, h], map.getMaxZoom() - 1);
    var northEast = map.unproject([w, 0], map.getMaxZoom() - 1);
    var bounds = new L.LatLngBounds(southWest, northEast);

    // add the image overlay, 
    // so that it covers the entire map
    L.imageOverlay(url, bounds).addTo(map);

    // tell leaflet that the map is exactly as big as the image
    map.setMaxBounds(bounds);

    // pixel coords
    var m = {
        x: 500,
        y: 500
      };
      
      var n = {
        x: 7500,
        y: 1400
      };
      
      //Add marker
    
    //map.on('click', addMarker);
    var addedOne = false,
      checkpoint = L.divIcon({
        className: 'checkpoint-pin',
        html: '<img src="/adminlte/dist/img/wifi.png" data-toggle="modal" data-target="#myModal">',
        iconSize: [30, 30],
        iconAnchor: [18, 30]
      });
      
      
      var table = false,
      playerTable = L.divIcon({
        className: 'checkpoint-pin',
        html: '<img src="/adminlte/dist/img/wifi.png" data-toggle="modal" data-target="#myModal2">',
        iconSize: [30, 30],
        iconAnchor: [18, 30]
      });
      
      var cabinet1 = false,
      cabinetCard1 = L.divIcon({
        className: 'cabinet-pin',
        //html: '<img src="images/cabinet1_icon.png" data-toggle="modal" data-target="#myModal">',
        iconSize: [30, 30],
        iconAnchor: [18, 30]
      });
      
      var cabinet2 = false,
      cabinetCard2= L.divIcon({
        className: 'cabinet-pin',
        //html: '<img src="images/cabinet2_icon.png" data-toggle="modal" data-target="#myModal">',
        iconSize: [30, 30],
        iconAnchor: [18, 30]
      });

    function addMarker(e) {
      // Add marker to map at click location; add popup window
      if (userOne) {
        return;
      }

      var newMarker = new L.marker(e.latlng, {
        icon: userPin
      }).addTo(map);
      newMarker.bindPopup("<b>New Room</b><br>Adventures await");
      userOne = true;
    }
    // Lookup neighbors https://github.com/mapbox/leaflet-knn

    var chekpointMark = L.marker(map.unproject([m.x, m.y], map.getMaxZoom()), {
      icon: checkpoint
    }).addTo(map);
    
     var chekpointMark2 = L.marker(map.unproject([n.x, n.y], map.getMaxZoom()), {
      icon: playerTable
    }).addTo(map);
        
       
         